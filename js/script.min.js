document.addEventListener('DOMContentLoaded', () => {

    // Костыль при загрузе для телефонов - выставление размера первого слайда на главной странице для мобильных телефонов

    if (document.querySelector('.main-page-header') && window.screen.width < 650) {
        let vh = window.innerHeight * 0.01;
        document.querySelector('.main-page-screen').style.setProperty('--vh', `${vh}px`);

        window.addEventListener('resize', () => {
            document.querySelector('.main-page-screen').style.setProperty('--vh', `${vh}px`);
        })
    }

    // Костыль: если главная и страница загружается посередине
    if (document.querySelector('.main-page-header')) {
        setTimeout(() => {
            window.pageYOffset > 5 ? document.querySelector('.nav').classList.add('nav-static') : ''
        }, 10)
    }

    // Показать сайт уже загруженным, без рывков

    document.body.style.opacity = 1


    // Меню

    document.querySelector('.menu-area-w').addEventListener('click', () => {

        let target = event.target.parentElement

        if (target.parentElement.querySelector('.menu-icon').classList.contains('open')) {

            setTimeout(() => {
                document.querySelector('.nav-list').style.opacity = 0
                target.parentElement.querySelector('.menu-icon').classList.remove('open')
            }, 0)

            setTimeout(() => {
                document.querySelector('.nav-list').removeAttribute('style')
            }, 150)
        }

        else {

            setTimeout(() => {
                document.querySelector('.nav-list').style.display = 'block'
                target.parentElement.querySelector('.menu-icon').classList.add('open')
            }, 0)
            
            setTimeout(() => {
                document.querySelector('.nav-list').style.opacity = 1
            }, 10)
        }
    });


    // Всплывающие формы

    (function() {

        if (!document.querySelectorAll('.send-request-link').length) return false

        document.querySelectorAll('.send-request-link').forEach(item => {
        

            // Маска телефона

            let im = new Inputmask("+7 (999) 999-99-99")
                im.mask(document.querySelector('.form-order-input-phone'))

            // Отправка формы

            document.querySelector('.form-order-btn').addEventListener('click', () => {

                let form = findParent (event.target, 'order-form')

                if (!form.querySelector('input[name="phone"]').inputmask.isComplete()) {
                    form.querySelector('input[name="phone"]').style = 'border-color: red'
                    return false
                }

                let name = form.querySelector('input[name="name"]').value,
                    email = form.querySelector('input[name="email"]').value,
                    phone = form.querySelector('input[name="phone"]').value,
                    textarea = form.querySelector('textarea'),
                    str = 'name=' + name + '&email=' + email + '&phone=' + phone,
                    target = event.target


                if (target.classList.contains('blocked')) return false

                /*if (textarea.value == '' || textarea.value.length < 3) {

                    textarea.style.border =  '1px solid red'

                    setTimeout(() => {
                        textarea.removeAttribute('style')
                    }, 1000)
                    return false
                }*/
                

                target.classList.add('blocked')
                target.innerText = "Отправка..."

                form.querySelectorAll('input[name="radio"]').forEach(item => {
                    item.checked ? str += '&type_of_connect=' + item.parentElement.querySelector('span').innerText : ''
                })

                form.querySelectorAll('input[name="radio-2"]').forEach(item => {
                    item.checked ? str += '&type_of_call=' + item.parentElement.querySelector('span').innerText : ''
                })

                str += '&comment=' + textarea.value

                sendForm (str, '/libs/send-email-form.php', target)

                target.innerText = "Успешно!"
            })

            // Сброс полей

            document.querySelector('.form-order-input-phone').addEventListener('click', () => {
                event.target.style = 'border-color: rgb(179,147,121)'
            })

            document.querySelector('.form-order-input-phone').addEventListener('input', () => {
                event.target.style = 'border-color: rgb(179,147,121)'
            })
        })
    })();

    // Всплывающие формы, конец

    if (document.querySelectorAll('.scroll-to').length) {
        document.querySelectorAll('.scroll-to').forEach(item => {
            item.addEventListener('click', () => {
                event.preventDefault()
                window.scrollTo({
                    top: document.getElementById(item.getAttribute('data-scroll-to')).offsetTop,
                    behavior: 'smooth'
                })
            })
        })
    }


    // Скроллинг и фиксация меню
    if (window.screen.width > 649 || document.querySelector('.main-page-header')) {
        let time = 0
        document.addEventListener('scroll', () => {
            window.pageYOffset > 5 && time ? document.querySelector('.nav').classList.add('nav-static') : document.querySelector('.nav').classList.remove('nav-static')
            time = 1
        })
    }


    // Выбор объема товара

    if (document.querySelectorAll('.volume-item-available').length) {
        document.querySelectorAll('.volume-item-available').forEach(item => {
            item.addEventListener('click', () => {
                event.target.parentElement.querySelectorAll('.volume-item-available').forEach(item => {
                    item.classList.remove('active')
                })
                item.classList.add('active')
            })
        })
    }


    document.body.addEventListener('click', () => {

    // Плюс-минус в карточке товара

        (() => {

            if (!document.querySelector('.item-amount-plus') || !document.querySelector('.item-amount-minus')) return false

            if (event.target.classList.contains('item-amount-minus')) {

                let parent = findParent(event.target, 'product-card'),
                    valueInput = parent.querySelector('.item-amount-value')

                    if (valueInput.value <= 1) return false
                    valueInput.value = +valueInput.value - 1

                    if (parent.classList.contains('item-in-cart')) {

                        minusToCart (parent.getAttribute('data-id'))
                        returnCartValues ()

                        cartAddNotification (`
                            -1 шт удален из заказа
                        `)
                    }
            }

            if (event.target.classList.contains('item-amount-plus')) {

                let parent = findParent(event.target, 'product-card'),
                    valueInput = parent.querySelector('.item-amount-value')

                    if (valueInput.value >= 99) return false
                    valueInput.value = +valueInput.value + 1

                    if (parent.classList.contains('item-in-cart')) {

                        plusToCart (parent.getAttribute('data-id'))
                        returnCartValues ()

                        cartAddNotification (`
                            +1 шт добавлен к заказу
                        `)
                    }
            }
        })();

        // Плюс-минус на странице товара

        (() => {

            if (!document.querySelector('.amount-select-minus') || !document.querySelector('.amount-select-plus')) return false

            if (event.target.classList.contains('amount-select-minus')) {

                let parent = findParent(event.target, 'product-description'),
                    valueInput = parent.querySelector('.amount-select-value')

                    if (valueInput.value <= 1) return false
                    valueInput.value = +valueInput.value - 1

                    if (parent.querySelector('.product-item-add-cart').classList.contains('added-to-cart-w')) {

                        minusToCart (parent.querySelector('.order-button-cart').getAttribute('data-id'))
                        returnCartValues ()

                        cartAddNotification (`
                            -1 шт удален из заказа
                        `)
                    }
            }

            if (event.target.classList.contains('amount-select-plus')) {

                let parent = findParent(event.target, 'product-description'),
                    valueInput = parent.querySelector('.amount-select-value')

                    if (valueInput.value >= 99) return false
                    valueInput.value = +valueInput.value + 1

                    if (parent.querySelector('.product-item-add-cart').classList.contains('added-to-cart-w')) {

                        plusToCart (parent.querySelector('.order-button-cart').getAttribute('data-id'))
                        returnCartValues ()

                        cartAddNotification (`
                            +1 шт добавлен к заказу
                        `)
                    }
            }
        })();


        // Плюс-минус в корзине товаров

        (() => {

            if (!document.querySelector('.cart-section')) return false

            if (event.target.classList.contains('cart-item-amount-minus')) {

                let parent = findParent(event.target, 'cart-item'),
                    valueInput = parent.querySelector('.cart-item-amount-value')

                    if (valueInput.value <= 1) return false
                    valueInput.value = +valueInput.value - 1

                    minusToCart (parent.getAttribute('data-id'))
                    returnCartValues ()
            }

            if (event.target.classList.contains('cart-item-amount-plus')) {

                let parent = findParent(event.target, 'cart-item'),
                    valueInput = parent.querySelector('.cart-item-amount-value')

                    if (valueInput.value >= 99) return false
                    valueInput.value = +valueInput.value + 1

                    plusToCart (parent.getAttribute('data-id'))
                    returnCartValues ()
            }
        })();
    })

    // конец

    // Все по корзине товаров и добавлению в нее

    ;(() => {
    
        returnCartValues ()

        // Проверить товары, которые уже в корзине и пометить на странице
        
        document.querySelectorAll('.product-card').forEach(item => {

            let order = JSON.parse(localStorage.getItem('order'))
                if (order && order != null) {
                    for (let i = 0; i < order.length; i++) {
                        if (order[i].id == item.getAttribute('data-id')) {
                            item.classList.add('item-in-cart')
                            item.querySelector('.item-order-btn').innerText = ''
                            item.querySelector('.item-amount-value').value = order[i].amount
                            item.querySelector('.item-order-btn').insertAdjacentHTML('beforeend', `<a href = "/cart">В корзине</a>`)
                        }
                    }
                }
        })
        
        if (document.querySelectorAll('.item-order-btn')) {
            document.querySelectorAll('.item-order-btn').forEach(item => {
                item.addEventListener('click', () => {

                    let product = findParent (event.target, 'product-card')

                    if (!product.getAttribute('data-id')) return false

                    if (!product.classList.contains('item-in-cart')) {

                        product.classList.add('item-in-cart')
                        addToCart (product.getAttribute('data-id'), product.querySelector('.item-amount-value').value, product.getAttribute('data-price'))
                        cartAddNotification('Товар добавлен в корзину!')

                        // Поменять данные в шапке

                        returnCartValues ()

                        event.target.innerText = ''
                        event.target.insertAdjacentHTML('beforeend', `<a href = "/cart">В корзине</a>`)

                        return false
                    }
                })
            })
        }
    })();


    // На странице товара:
    ;(function(){
        if (!document.querySelector('.order-button-cart')) return false

        let btn = document.querySelector('.order-button-cart')

        if (productInCart (btn.getAttribute('data-id'))) {
            btn.innerText = ''
            btn.classList.add('added-to-cart')
            document.querySelector('.product-item-add-cart').classList.add('added-to-cart-w')
            btn.insertAdjacentHTML('beforeend', '<a href = "/cart" class = "order-button-cart-link">Товар в корзине. Перейти →</a>')
            document.querySelector('.amount-select-value').setAttribute("value", productInCart (btn.getAttribute('data-id')).amount)
        }

        if (!productInCart (btn.getAttribute('data-id'))) {

            document.querySelector('.order-button-cart').addEventListener('click', () => {
                btn.innerText = ''
                btn.classList.add('added-to-cart')
                document.querySelector('.product-item-add-cart').classList.add('added-to-cart-w')
                btn.insertAdjacentHTML('beforeend', '<a href = "/cart" class = "order-button-cart-link">Товар в корзине. Перейти →</a>')
                addToCart (event.target.getAttribute('data-id'), document.querySelector('.amount-select-value').value), event.target.getAttribute('data-price')
                cartAddNotification('Товар добавлен в корзину!')
            })
        }
    })();

;(function(){

// Объем

let products = document.querySelectorAll('.product-card'),
    filters = document.querySelectorAll('.filter-item')

    if (products.length == 0 || filters.length == 0) return false

    // Нажатие на фильтры
    filters.forEach(item => {
        item.addEventListener('click', () => {

            if (event.target.classList.contains('all-filter-item')) {
                show_all_products (filters, products)
                return false
            }

            event.target.parentElement.querySelector('.all-filter-item').classList.remove('active')

            event.target.classList.contains('active') ? event.target.classList.remove('active') : event.target.classList.add('active')
            sort_products (filters, products)
        })
    })

    // Сбросить все фильтры

    document.querySelector('.clear-filters').addEventListener('click', () => {

        filters.forEach(item => {
            item.classList.remove('active')
        })
        products.forEach(item => {
            item.classList.remove('hidden')
        })

        let url = new URL(location)
        url.searchParams.delete("weight")
        url.searchParams.delete("brand")
        history.pushState({}, "", url)
    })

function sort_products (filters, products) {

    let filtersArr = []

    // Перебор активных фильтров и заполнение массива фильтров
    filters.forEach(item => {

        if (!item.classList.contains('active')) return

        item.getAttribute('data-weight') ? filtersArr.push(item.getAttribute('data-weight')) : ''
        item.getAttribute('data-brand') ? filtersArr.push(item.getAttribute('data-brand')) : ''
    })

    // Если фильтры не выбраны

    if (!filtersArr.length) {
        show_all_products (filters, products)
        return false
    }

    // Перебор продуктов и заполнение массива продуктов
    
    products.forEach(item => {

        // Если пустой массив фильтров
        if (!filtersArr.length) {
            item.classList.remove('hidden')
            return
        }

        // Проверяем товары на соответствие фильтрам
        
        filtersArr.includes(item.getAttribute('data-weight')) ||
        filtersArr.includes(item.getAttribute('data-brand')) ? item.classList.remove('hidden') : item.classList.add('hidden')
    })
}

function show_all_products (filters, products) {

    // Первый фильтр Все

    filters.forEach((item, index) => {
        index == 0 ? item.classList.add('active') : item.classList.remove('active')
    })

    // Показ всех продуктов
    
    products.forEach(item => {
        item.classList.remove('hidden')
    })
}

})();


// Фильтры, конец

        
// Страница корзины

if (document.querySelector('.cart-section')) {

    // Если нет заказа в корзине

    if (!localStorage.getItem('order')) {
        setTimeout(() => {
            emptyCartInfo()
        }, 500)
    }

    // Если есть заказ в корзине

    (() => {

        if (!localStorage.getItem('order')) return false

        let order = JSON.parse(localStorage.getItem('order')),
            summ = 0,
            final_summ = 0, // со скидкой
            products = []

            fetch('/php/cart_data.php', {
                method: 'POST',
                headers: {  
                    "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"  
                },
                body: JSON.stringify({order: order})
            }).then( (response) => {
               return response.text()
            }).then((data) => {

                products = JSON.parse(data)
                products = products.data
                        
                for (let key in order) {

                    products.forEach(item => {
                        if (+order[key].id == +item.id) {
                            item.amount = +order[key].amount
                        }
                    })
                }

                // Считаем общие суммы

                products.forEach(item => {
                    summ += item.price
                    final_summ += getFinalPrice (item.price, item.sale) * item.amount
                })

                setTimeout(() => {

                    document.querySelector('.cart-preloader').remove()

                    document.querySelector('.cart-section').insertAdjacentHTML('beforeend', `
                        <div class="cart-wrapper"></div><div class="cart-final"></div>
                    `)

                    products.forEach(item => {

                        document.querySelector('.cart-wrapper').insertAdjacentHTML('beforeend', `

                            <div class = "cart-item" data-id = "${item.id}">
                                <div class = "cart-remove" data-id = ${item.id}></div>
                                <div class="product-cart-pic">
                                    <a href = "/catalog/${item.url_name}" target = "_blank" class = "product-cart-pic-link">
                                        <img src="/images/catalog/brands/${item.id}/1_s.png" alt="" class = "product-cart-pic-img">
                                    </a>
                                </div>
                                <div class = "product-cart-content">
                                    <div class="product-cart-title">
                                        <a href = "/catalog/${item.url_name}" target = "_blank" class = "product-cart-title-link thin-font-style">
                                            <span class = "product-cart-title-span">${item.category}</span> <span class = "product-cart-title-span bold-text-600">${item.brand} ${item.name} ${[window.screen.width <= 1050 ? ` (${item.weight})` : ``]}</span>
                                        </a>
                                    </div>
                                    <div class = "cart-in-stock">
                                        <span>В наличии</span>
                                    </div>
                                    <div class="product-cart-bottom">
                                        <div class="product-cart-bottom__left">
                                            <div class = "item-plus-minus">
                                                <div class = "cart-item-amount-minus">–</div>
                                                <div class = "cart-item-amount-val-block">
                                                    <label for = "num-${item.id}">
                                                        <input type="text" name = "cart-item-amount-value" class = "cart-item-amount-value" readonly = "readonly" value = "${item.amount}" id = "num-${item.id}" aria-label="Количество товаров для заказа">
                                                    </label>
                                                </div>
                                                <div class = "cart-item-amount-plus">+</div>
                                            </div>
                                        </div>
                                        <div class="product-cart-bottom__right">
                                            <div class = "product-cart-bottom-div">
                                            ${item.sale > 0 ? `<span class = "product-cart-bottom-full">${getFinalPriceDecorated (item.price, 0)} ₽</span>` : ''}
                                                <span class = "product-cart-bottom-span" data-fullprice = ${getFinalPrice (item.price, item.sale)}>
                                                    ${getFinalPriceDecorated (item.price, item.sale)}
                                                </span>
                                                <span class = "product-cart-bottom-span product-cart-bottom-r"> ₽</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `)
                    })

                    console.log(products)

                    document.querySelector('.cart-final').insertAdjacentHTML('beforeend', `
                            <div class = "common-title">
                                <span class = "common-title-thin">В корзине:</span>
                                <span class = "common-title-bold">${products.length} ${returnCorrectWord(products.length)}</span>
                            </div>
                            <div class = "cart-all-in-stock">Все товары в наличии</div>
                            <div class = "cart-common">
                                <span class = "cart-common-thin">Итого:</span>
                                <span class = "cart-common-bold final-price">${countFinalSumm(products).toLocaleString()} ₽</span>
                            </div>
                            <div class="send-order send-order-result">
                                Оформить заказ
                            </div>
                    `)

                }, 300)
            })

            document.body.addEventListener('click', () => {

                if (event.target.classList.contains('send-order-result')) {

                    event.preventDefault()

                    if (document.querySelector('.cart-order-ww')) {
                        
                        setTimeout(() => {
                            document.querySelector('.cart-order-ww').scrollIntoView({
                                behavior: 'smooth',
                                block: 'start'
                            })
                        }, 100)

                        return false
                    }

                    document.querySelector('.cart-wrapper').insertAdjacentHTML('beforeend', `
                        <div class = "cart-order-ww">
                            <p class = "h2-title">Почти готово! Осталось только указать данные и оплатить:</p>
                            <div class = "cart-order-register">
                                <form name = "cart-order-register-form" class = "cart-order-register-form">
                                    <div class = "cart-order-input-w">
                                        <label>
                                            <p class = "cart-order-p">Ваше имя (по желанию):</p>
                                            <input type = "name" name = "name" class = "cart-order-input" placeholder="Имя">
                                        </label>
                                    </div>
                                    <div class = "cart-order-input-w">
                                        <label>
                                            <p class = "cart-order-p">Ваш email (по желанию):</p>
                                            <input type = "email" name = "email" class = "cart-order-input" placeholder="Email">
                                        </label>
                                    </div>
                                    <div class = "cart-order-input-w">
                                        <label>
                                            <p class = "cart-order-p">Ваш телефон (для уточнения заказа и доставки):</p>
                                            <input type = "phone" name = "phone" class = "cart-order-input required-field" placeholder="+7 (___) ___-__-__">
                                        </label>
                                    </div>
                                    <div class = "cart-order-input-w">
                                        <label>
                                            <p class = "cart-order-p">Ваш адрес и любые комментарии по заказу:</p>
                                            <textarea name = "textarea" class = "cart-order-textarea required-field" placeholder="Введите текст"></textarea>
                                        <label>
                                    </div>
                                    <div class = "pay-radio">
                                        <div class = "contact-method-form-2">
                                            <p class = "cart-order-p">Удобнее оплатить:</p>
                                            <div class = "pay-radio-div">
                                                <label class="contact-label">
                                                    <input type="radio" name="radio-2" class = "cart-radio cart-radio-1" checked />
                                                    <span>Наличными или переводом при получении</span>
                                                </label>
                                            </div>
                                            <div class = "pay-radio-div">
                                                <label class="contact-label">
                                                    <input type="radio" name="radio-2" class = "cart-radio cart-radio-2" />
                                                    <span>Сейчас на сайте</span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="agree-block agree-block-final">
                                        <label for="checkbox" class="checkbox-label">
                                          <input type="checkbox" id="checkbox" class="checkbox" checked>
                                          <span class="checkbox-view">
                                            <svg class="checkbox-icon" xmlns="http://www.w3.org/2000/svg" width="18" viewBox="0 0 511.985 511.985">
                                                <path fill="#000" d="M500.088 83.681c-15.841-15.862-41.564-15.852-57.426 0L184.205 342.148 69.332 227.276c-15.862-15.862-41.574-15.862-57.436 0-15.862 15.862-15.862 41.574 0 57.436l143.585 143.585c7.926 7.926 18.319 11.899 28.713 11.899 10.394 0 20.797-3.963 28.723-11.899l287.171-287.181c15.862-15.851 15.862-41.574 0-57.435z"/>
                                            </svg>
                                          </span>
                                          <span class = "agree-text">Согласен на обработку персональных данных</span>
                                        </label>
                                    </div>
                                    <button class = "cart-form-send btn-10px">Отправить заявку!</button>
                                </form>
                            </div>
                        </div>
                    `)

                    setTimeout(() => {
                        document.querySelector('.cart-order-ww').scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        })
                    }, 100)

                    // Кнопка оплаты - изменение текста

                    document.querySelectorAll('.cart-radio').forEach(item => {
                        item.addEventListener('change', () => { 
                            event.target.classList.contains('cart-radio-1') ?
                                document.querySelector('.cart-form-send').innerText = 'Отправить заявку и оплатить при получении' :
                                document.querySelector('.cart-form-send').innerText = 'Оплатить онлайн'
                        })
                    })

                    // Маска телефона

                    new Inputmask("+7 (999) 999-99-99").mask(document.querySelector('input[name="phone"]'))

                    // Отправка заявки

                    let sending = 0

                    document.querySelector('.cart-form-send').addEventListener('click', () => {

                        event.preventDefault()

                        if (sending) return false

                        let btn = event.target,
                            form = event.target.parentElement,
                            phone = form.querySelector('input[name="phone"]'),
                            invalid_fields = 0

                        if (!phone.inputmask.isComplete()) {
                            phone.parentElement.parentElement.classList.add('input-w-false')
                            phone.parentElement.querySelector('.cart-order-p').innerText = "Пожалуйста, введите номер телефона:"
                            phone.parentElement.querySelector('.cart-order-p').style.color = "red"
                            invalid_fields++
                            event.target.innerText = "Некорректно введен телефон..."
                        }
                
                        if (!document.getElementById('checkbox').checked) {
                            document.querySelector('.agree-text').style.color = 'red'
                            invalid_fields++
                        }
                        
                        if (invalid_fields) return false

                        sending += 1

                        btn.innerText = 'Отправка...'

                        // Сбор данных корзины 

                        let items = {}

                        document.querySelectorAll('.cart-item-row').forEach((item, index) => {

                            items[index] = {}

                            items[index].name = item.querySelector('.cart-title').innerText
                            items[index].amount = item.querySelector('.cart-amount-span').innerText
                            items[index].weight = item.querySelector('.cart-weight').innerText
                            items[index].price = item.querySelector('.cart-price-fullprice').getAttribute('data-fullprice')
                            items[index].summ = item.querySelector('.cart-summ').innerText
                        })

                        fetch("/libs/send-cart.php", {
                            method: "POST",
                            body: JSON.stringify({
                                name: form.querySelector('input[name="name"]').value,
                                email: form.querySelector('input[name="email"]').value,
                                phone: phone.value,
                                textarea: form.querySelector('textarea').value,
                                payment: form.querySelector('input[name="radio-2"]:checked').parentElement.querySelector('span').innerText,
                                order: localStorage.order,
                                items: items,
                                final_price: document.getElementById('final-price').innerText
                            }),
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            },
                        })
                        .then(response => {
                            if (!response.ok) throw Error(response.statusText)
                            response.ok ? btn.innerText = 'Успешно!' : ''
                        })
                        .catch(error => {
                            console.log(error)
                            btn.innerText = 'Ошибка отправки =('
                        })
                    })

                    document.getElementById('checkbox').addEventListener('change', () => {
                        document.querySelector('.agree-text').style.color = 'black'
                    })

                    document.querySelector('.cart-order-register-form').querySelectorAll('input[name="phone"]').forEach(item => {

                        item.addEventListener('focus', () => {
                            event.target.parentElement.parentElement.classList.remove('input-w-false')
                            event.target.parentElement.querySelector('.cart-order-p').innerText = "Ваш телефон (для уточнения заказа и доставки):"
                            event.target.parentElement.querySelector('.cart-order-p').removeAttribute('style')
                            document.querySelector('.cart-form-send').innerText = "Отправить заявку!"
                        })

                        item.addEventListener('keydown', () => {
                            event.target.parentElement.parentElement.classList.remove('input-w-false')
                            event.target.parentElement.querySelector('.cart-order-p').innerText = "Ваш телефон (для уточнения заказа и доставки):"
                            event.target.parentElement.querySelector('.cart-order-p').removeAttribute('style')
                            document.querySelector('.cart-form-send').innerText = "Отправить заявку!"
                        })
                    })
                }

                // Если изменение количества позиций в корзине
                
                let row, span

                if (event.target.classList.contains('cart-amount-plus')) {

                    row = event.target.parentElement.parentElement
                    span = row.querySelector('.cart-amount-span')

                    if (parseInt(span.innerText) >= 99) return false

                    span.innerText = parseInt(span.innerText) + 1 + ' шт.'

                    // Обновление данных в localstorage
                    
                    for (let i = 0; i < products.length; i++) {
                       +products[i].id == +row.getAttribute('data-id') ? products[i].amount = parseInt(span.innerText) : ''
                    }

                    products.length ? localStorage.setItem('order', JSON.stringify(make_array (products))) : localStorage.removeItem('order')
                    products.length ? returnCartValues () : ''

                    // Обновление финальной суммы

                    row.querySelector('.cart-summ').innerText = (parseInt(span.innerText) * parseInt(row.querySelector('.cart-price-fullprice').getAttribute('data-fullprice'))).toLocaleString() + ' р.'
                    document.getElementById('final-price').innerText = (countFinalSumm(products)).toLocaleString() + ' р.'
                }

                if (event.target.classList.contains('cart-amount-minus')) {

                    row = event.target.parentElement.parentElement
                    span = row.querySelector('.cart-amount-span')

                    if (parseInt(span.innerText) <= 1) return false

                    span.innerText = parseInt(span.innerText) - 1 + ' шт.'

                    // Обновление данных в localstorage

                    for (let i = 0; i < products.length; i++) {
                        +products[i].id == +row.getAttribute('data-id') ? products[i].amount = parseInt(span.innerText) : ''
                    }

                    products.length ? localStorage.setItem('order', JSON.stringify(make_array (products))) : localStorage.removeItem('order')
                    products.length ? returnCartValues () : ''

                    // Обновление финальной суммы

                    row.querySelector('.cart-summ').innerText = (parseInt(span.innerText) * parseInt(row.querySelector('.cart-price-fullprice').getAttribute('data-fullprice'))).toLocaleString() + ' р.'
                    document.getElementById('final-price').innerText = (countFinalSumm(products)).toLocaleString() + ' р.'
                }
            })


            // Удаление столбца

            document.addEventListener('click', () => {

                (() => {

                    if (!event.target.classList.contains('cart-remove')) return false

                        for (let i = 0; i < products.length; i++) {
                            +products[i].id == +event.target.getAttribute('data-id') ? products.splice(i, 1) : ''
                        }

                        products.length ? localStorage.setItem('order', JSON.stringify(make_array (products))) : localStorage.removeItem('order')
                        products.length ? returnCartValues () : ''

                        event.target.parentElement.remove()

                        if (document.querySelectorAll('.cart-item').length) return false
                        
                        emptyCartInfo ()
                        returnCartValues ()

                        document.querySelector('.cart-order-ww') ? document.querySelector('.cart-order-ww').remove() : ''
                })();
            })
    })();
}
})



/***
    Обработка форм
*/

    // Форма Есть пожелания? на главной

    if (document.querySelector('.reviews-form-send')) {

        document.querySelector('.reviews-form-send').addEventListener('click', () => {

            event.preventDefault()

            let form = event.target.parentElement,
                name = form.querySelector('input[name="name"]').value,
                email = form.querySelector('input[name="email"]').value,
                textarea = form.querySelector('textarea'),
                str = 'name=' + name + '&email=' + email,
                target = event.target

            if (target.classList.contains('blocked')) return false

            if (textarea.value == '' || textarea.value.length < 3) {

                textarea.style.outline =  '1px solid red'

                setTimeout(() => {
                   textarea.removeAttribute('style')
               }, 1000)

                return false
            }

            if (!form.querySelector('.checkbox').checked) {
                form.querySelector('.agree-text').style.color = 'red'
                return false
            }

            target.classList.add('blocked')

            target.innerText = 'Отправка..'

            str += '&comment=' + textarea.value

            sendCommentData (str, '/libs/send-email-comment.php', target)

            target.innerText = 'Успешно!'
        })

        document.getElementById('checkbox').addEventListener('change', () => {
            document.querySelector('.agree-text').style.color = 'black'
        })
    }
    

/** Обработка форм, конец  */


function body_lock() {

    let body = document.body;
    if (!body.classList.contains('scroll-locked')) {
        let bodyScrollTop = (typeof window.pageYOffset !== 'undefined') ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
        console.log(document.querySelector('.nav').classList.contains('nav-static'))
        document.querySelector('.nav').classList.contains('nav-static') ? document.querySelector('.nav').classList.add('nav-static-temporary') : ''
        body.classList.add('scroll-locked');
        body.style.top = "-" + bodyScrollTop + "px";
        body.setAttribute("data-popup-scrolltop", bodyScrollTop)
    }
}

function body_unlock() {
    let body = document.body;
    if (body.classList.contains('scroll-locked')) {
        let bodyScrollTop = document.body.getAttribute("data-popup-scrolltop");
        document.querySelector('.nav').classList.contains('nav-static-temporary') ? document.querySelector('.nav').classList.remove('nav-static-temporary') : ''
        body.classList.remove('scroll-locked');
        body.style.top = "";
        body.removeAttribute("data-popup-scrolltop")
        window.scrollTo(0, bodyScrollTop)
    }
}

function findParent (el, cls) {
    while ((el = el.parentElement) && !el.classList.contains(cls));
    return el;
}

function getClickedElementIndex(arr) {
    for (let i = 0; i < arr.length; i++) {
        if (event.target == arr[i]) return i;
    }
}


async function sendCommentData (str, url, target) {

    let response = await fetch(url, {
        method: 'POST',
        headers: {  
            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"  
        },
        body: str
    })

    let result = await response

    if (result.ok) {
        target.innerText = 'Успешно!'

        setTimeout(() => {
            target.innerText = 'Отправить!'
            target.classList.remove('blocked')
        }, 8000)

        ym(95042043,'reachGoal','send_review')
    }

    if (!result.ok) {

        target.innerText = 'Ошибка!'

        setTimeout(() => {
            target.innerText = 'Отправить!'
            target.classList.remove('blocked')
        }, 8000)
    }
}

async function sendForm (str, url, target) {

    let response = await fetch(url, {
        method: 'POST',
        headers: {  
            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"  
        },
        body: str
    })

    let result = await response

    if (result.ok) {
        target.innerText = 'Успешно!'

        setTimeout(() => {
            target.innerText = 'Отправить!'
            target.classList.remove('blocked')
        }, 8000)

        ym(95042043,'reachGoal','send_form')
    }

    if (!result.ok) {

        target.innerText = 'Ошибка!'

        setTimeout(() => {
            target.innerText = 'Отправить!'
            target.classList.remove('blocked')
        }, 8000)
    }
}

// Вывести данные по товарам в корзине в шапке

function returnCartValues () {
    let data = JSON.parse(localStorage.getItem('order')) || []

    let summ = 0,
        amount = 0

    for (let i = 0; i < data.length; i++) {
        summ += data[i].amount * data[i].price
        amount += data[i].amount
    }

    amount > 0 ? document.querySelector('.cart-block').classList.add('active') : document.querySelector('.cart-block').classList.remove('active')

    document.querySelector('.cart-num').innerText = amount
    document.querySelector('.cart-price-text').innerText = returnCorrectWord (amount)
    document.querySelector('.cart-price-value').innerText = summ.toLocaleString()

     // На странице корзины
    document.querySelector('.common-title-bold') ? document.querySelector('.common-title-bold').innerText = amount + ' ' + returnCorrectWord (amount) : ''
    document.querySelector('.final-price') ? document.querySelector('.final-price').innerText = summ.toLocaleString() + ' ₽' : ''

    document.querySelector('.cart-block').classList.add('visible')
}

// Вернуть правильное склонение

function returnCorrectWord (value) {
    value = value.toString()

    value == 0 ? value = ' товаров' : ''
    value < 20 && value.slice(-2) == 1 ? value = ' товар' : ''
    value < 20 && value.slice(-2) >= 2 && value.slice(-2) <= 4 ? value = ' товара' : ''
    value <= 20 && value.slice(-2) > 4 && value.slice(-2) <= 20 ? value = ' товаров' : ''
    value > 20 && value.slice(-1) == 1 ? value = ' товар' : ''
    value > 20 && value.slice(-1) >= 2 && value.slice(-1) <= 4 ? value = ' товара' : ''
    value > 20 && value.slice(-1) >= 5 && value.slice(-1) <= 9 ? value = ' товаров' : ''
    value > 20 && value.slice(-1) == 0 ? value = ' товаров' : ''

    return value
}

// Добавить товар в корзину

function addToCart (id, amount, price) {

    let order = JSON.parse(localStorage.getItem('order'))

    if (order && order != null) {

        let id_isset = 0

        for (let i = 0; i < order.length; i++) {
            if (order[i].id == id) {
                order[i].amount += parseInt(amount)
                order[i].price = parseInt(price)
                id_isset = 1
                break
            }
        }

        !id_isset ? order.push({'id': id, 'amount': parseInt(amount), 'price': parseInt(price) }) : ''

        localStorage.setItem('order', JSON.stringify(order))
        return false
    }

    order = []
    order.push({'id': id, 'amount': parseInt(amount), 'price': parseInt(price)})
    localStorage.setItem('order', JSON.stringify(order))

    return false
}

// Прибавить товар в корзине

function plusToCart (id, amount = 1) {

    let order = JSON.parse(localStorage.getItem('order'))

    if (!order || order == null) return false

    for (let i = 0; i < order.length; i++) {
        if (order[i].id == id) {
            order[i].amount = parseInt(order[i].amount) + amount
            break
        }
    }

    localStorage.setItem('order', JSON.stringify(order))
    return true
}

function minusToCart (id, amount = 1) {

    let order = JSON.parse(localStorage.getItem('order'))

    if (!order || order == null) return false

    for (let i = 0; i < order.length; i++) {
        if (order[i].id == id) {
            order[i].amount -= amount
            break
        }
    }

    localStorage.setItem('order', JSON.stringify(order))
    return true
}


function productInCart (id) {

    let order = JSON.parse(localStorage.getItem('order')),
        order_item = false

    if (order && order != null) {

        for (let i = 0; i < order.length; i++) {
            if (order[i].id == id) {
                order_item = order[i]
                break
            }
        }
    }

    return order_item
}

function cartAddNotification (text) {

    document.querySelector('.cart-warnings').insertAdjacentHTML('afterbegin', `
        <div class="cart-add-warning">${text}</div>
    `)

    setTimeout(() => {
        document.querySelectorAll('.cart-add-warning')[document.querySelectorAll('.cart-add-warning').length - 1].remove()
    }, 1000)
}


// Функция подсчитывает финальную сумму в корзине из данных localstorage

function countFinalSumm (order_data) {

    let final_summ = 0 // со скидкой

    order_data.forEach(item => {
        final_summ += getFinalPrice (item.price, item.sale) * item.amount
    })

    return final_summ
}

// Массив для записи в localstorage при смене количества или удалении товаров из корзины

function make_array (products) {
    let arr = [],
        obj = {}
        
    products.forEach(item => {
        obj = {}
        obj.id = item['id']
        obj.amount = item['amount']
        obj.price = getFinalPrice (item['price'], item['sale'])
        arr.push(obj)
    })

    return arr
}

// Функция, которая считает стоимость со скидкой или без с округлением в пользу клиента единым числом без деления на разряды

function getFinalPrice (price, saleSize = 0) {
    return saleSize ? Math.floor(price - (price / 100 * saleSize)) : parseInt(price)
}

// Функция, которая считает стоимость со скидкой или без с округлением в пользу клиента с делением на разряды для вывода

function getFinalPriceDecorated (price, saleSize = 0) {
    return saleSize ? (Math.floor(price - (price / 100 * saleSize))).toLocaleString() : parseInt(price).toLocaleString()
}

function emptyCartInfo () {

    document.querySelector('.cart-preloader') ? document.querySelector('.cart-preloader').remove() : ''
    document.querySelector('.cart-wrapper') ? document.querySelector('.cart-wrapper').remove() : ''
    document.querySelector('.cart-final') ? document.querySelector('.cart-final').remove() : ''

    document.querySelector('.cart-section').insertAdjacentHTML('afterbegin', `
        <div class = "empty-cart-info">
            <p class="simply-text">В корзине пока пусто...</p>
            <a class="simply-link right-margin-20" href = "/">На главную</a>
            <a class="simply-link" href = "/catalog">В каталог</a>
        </div>
    `)
}